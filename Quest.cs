using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum QuestID
{
    Autogenerated,
    Progress_HousesToMax, Progress_2Docks, Progress_2Storages, Progress_Tier2, Progress_300Population, Progress_OreRefiner, Progress_HospitalCoverage,
    Progress_Tier3, Progress_4MiniReactors, Progress_100Fuel, Progress_ExpStation, Progress_Tier4, Progress_CoveredFarm, Progress_CoveredLumbermill, 
    Progress_Reactor, Progress_FirstExpedition, Progress_Tier5, Progress_FactoryComplex, Progress_SecondFloor
}
// also add new in GetQuestTexture

public class Quest  {
    public string name = string.Empty;
    public string description = string.Empty;
	public bool picked = false;
	public float questLifeTimer {get;private set;}
	public float questRealizationTimer {get;private set;}

    public string[] steps { get; private set; }
	public int shuttlesRequired{get;private set;}
	public int crewsRequired{get;private set;}
	public Expedition expedition{get;private set;}
    public List<Crew> crews { get; private set; }
    public QuestID ID { get; private set; }


	public static List<Quest> questsList;
    static int progressQuestMask = int.MaxValue;
    const int PROGRESS_QUEST_COUNT = 19;
    public const int PROGRESS_QUESTS_INDEX = 0;

    static Quest () {
		questsList = new List<Quest>();
	}    

    public Quest()
    {
        crews = new List<Crew>();
    }

    public void CheckQuestConditions()
    {

    }

    public void RemoveCrew(int index)
    {
        if (crews.Count <= index) return;
        else crews.RemoveAt(index);
    }

    public void Stop()
    {
        if (!picked) return;
    }

    #region allQuestList
    public Quest GetAutogeneratedQuest()
    {
        return null;
    }

    public static Quest GetProgressQuest()
    {        
        List<QuestID> complementQuests = new List<QuestID>()
        {
            QuestID.Progress_HousesToMax, QuestID.Progress_2Docks, QuestID.Progress_2Storages, QuestID.Progress_Tier2
        };
        int lvl = GameMaster.colonyController.hq.level;
        if (lvl > 1)
        {
            complementQuests.Add(QuestID.Progress_300Population);
            complementQuests.Add(QuestID.Progress_OreRefiner);
            complementQuests.Add(QuestID.Progress_HospitalCoverage);
            complementQuests.Add(QuestID.Progress_Tier3);
            if (lvl > 2)
            {
                complementQuests.Add(QuestID.Progress_4MiniReactors);
                complementQuests.Add(QuestID.Progress_100Fuel);
                complementQuests.Add(QuestID.Progress_ExpStation);
                complementQuests.Add(QuestID.Progress_Tier4);
                if (lvl > 3)
                {
                    complementQuests.Add(QuestID.Progress_CoveredFarm);
                    complementQuests.Add(QuestID.Progress_CoveredLumbermill);
                    complementQuests.Add(QuestID.Progress_Reactor);
                    complementQuests.Add(QuestID.Progress_FirstExpedition);
                    complementQuests.Add(QuestID.Progress_Tier5);
                    if (lvl > 4)
                    {
                        complementQuests.Add(QuestID.Progress_FactoryComplex);
                        complementQuests.Add(QuestID.Progress_SecondFloor);
                    }
                }
            }
        }
        int x = 1;
        for (int i = 0; i < complementQuests.Count; i++)
        {
            if ((progressQuestMask & x) == 0) complementQuests.RemoveAt(i);
            x = x << 1;
        }
        int l = 0;
        if (complementQuests.Count > 0)
        {
            l = Mathf.RoundToInt(Random.value * complementQuests.Count);
        }
        else return null;

        Quest q = new Quest();
        bool setByDefault = true;        
        switch (l)
        {
            case 0: q.ID = QuestID.Progress_HousesToMax;  break;
            case 1: q.ID = QuestID.Progress_2Docks;break;
            case 2: q.ID = QuestID.Progress_2Storages;break;
            case 3: q.ID = QuestID.Progress_Tier2;break;
            case 4: q.ID = QuestID.Progress_300Population;break;
            case 5: q.ID = QuestID.Progress_OreRefiner;break;
            case 6: q.ID = QuestID.Progress_HospitalCoverage;break;
            case 7: q.ID = QuestID.Progress_Tier3;break;
            case 8: q.ID = QuestID.Progress_4MiniReactors;break;
            case 9: q.ID = QuestID.Progress_100Fuel;break;
            case 10: q.ID = QuestID.Progress_ExpStation;break;
            case 11: q.ID = QuestID.Progress_Tier4;break;
            case 12: q.ID = QuestID.Progress_CoveredFarm;break;
            case 13: q.ID = QuestID.Progress_CoveredLumbermill;break;
            case 14: q.ID = QuestID.Progress_Reactor;break;
            case 15:
                q.ID = QuestID.Progress_FirstExpedition;
                setByDefault = false;
                q.steps = new string[4];
                break;
            case 16: q.ID = QuestID.Progress_Tier5;break;
            case 17: q.ID = QuestID.Progress_FactoryComplex;break;
            case 18: q.ID = QuestID.Progress_SecondFloor;break;
        }
        if (setByDefault)
        {
            q.steps = new string[1];
            q.shuttlesRequired = 0;
            q.crewsRequired = 0;
            q.questLifeTimer = -1;
            q.questRealizationTimer = -1;
        }
        Localization.FillProgressQuest(q);


        int b = (int)Mathf.Pow(2, l);
        if ((progressQuestMask & b) == 0) progressQuestMask += b;
        return q;
    }
    #endregion

    public static void SetQuestTexture(QuestID qid, UnityEngine.UI.RawImage ri)
    {
        Texture originalTexture = null, overlayingTexture = null;
        Rect originalRect = Rect.zero, overlayingRect = Rect.zero;
        switch (qid)
        {
            default:
            case QuestID.Autogenerated: return null;
            case QuestID.Progress_HousesToMax:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0,0,originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.HOUSE_1_ID);
                break;
            case QuestID.Progress_2Docks:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.DOCK_ID);
                break;
            case QuestID.Progress_2Storages:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.STORAGE_0_ID);
                break;
            case QuestID.Progress_Tier2:
                originalTexture = UIController.current.buildingsTexture;
                originalRect = Structure.GetTextureRect(Structure.HQ_2_ID);
                break;
            case QuestID.Progress_300Population:
                originalTexture = UIController.current.iconsTexture;
                originalRect = UIController.GetTextureUV(Icons.Citizen);
                break;
            case QuestID.Progress_OreRefiner:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.ORE_ENRICHER_2_ID);
                break;
            case QuestID.Progress_HospitalCoverage:
                originalTexture = UIController.current.buildingsTexture;
                originalRect = Structure.GetTextureRect(Structure.HOSPITAL_2_ID);
                break;
            case QuestID.Progress_Tier3:
                originalTexture = UIController.current.buildingsTexture;
                originalRect = Structure.GetTextureRect(Structure.HQ_2_ID);
                break;
            case QuestID.Progress_4MiniReactors:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.MINI_GRPH_REACTOR_ID);
                break;
            case QuestID.Progress_100Fuel:
                originalTexture = QuestUI.questResourceBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.resourcesTexture;
                overlayingRect = ResourceType.GetTextureRect(ResourceType.FUEL_ID);
                break;
            case QuestID.Progress_ExpStation:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.XSTATION_ID);
                break;
            case QuestID.Progress_Tier4:
                originalTexture = UIController.current.buildingsTexture;
                originalRect = Structure.GetTextureRect(Structure.HQ_3_ID);
                break;
            case QuestID.Progress_CoveredFarm:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.FARM_4_ID);
                break;
            case QuestID.Progress_CoveredLumbermill:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.LUMBERMILL_4_ID);
                break;
            case QuestID.Progress_Reactor:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.GRPH_REACTOR_4_ID);
                break;
            case QuestID.Progress_FirstExpedition:
                originalTexture = QuestUI.questBlocked_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.iconsTexture;
                overlayingRect = UIController.GetTextureUV(Icons.GuidingStar);
                break;
            case QuestID.Progress_Tier5:
                originalTexture = UIController.current.buildingsTexture;
                originalRect = Structure.GetTextureRect(Structure.HQ_4_ID);
                break;
            case QuestID.Progress_FactoryComplex:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.SMELTERY_5_ID);
                break;
            case QuestID.Progress_SecondFloor:
                originalTexture = QuestUI.questBuildingBack_tx;
                originalRect = new Rect(0, 0, originalTexture.width, originalTexture.height);
                overlayingTexture = UIController.current.buildingsTexture;
                overlayingRect = Structure.GetTextureRect(Structure.COLUMN_ID);
                break;
        }
        Texture2D combined = new Texture2D(originalTexture.width, originalTexture.height);
        //скомбинировать и вернуть
    }

    #region save-load system
    public static QuestStaticSerializer SaveStaticData() {
		QuestStaticSerializer qss = new QuestStaticSerializer();
		qss.quests = new List<QuestSerializer>();
		if (questsList != null) {
		int i =0;
		while (i < questsList.Count) {
			if (questsList[i] == null) {
				questsList.RemoveAt(i);
				continue;
			}
			else {
				qss.quests.Add(questsList[i].Save());
				i++;
			}
		}
		}
		return qss;
	}
	public static void LoadStaticData(QuestStaticSerializer qss) {
		questsList = new List<Quest>();
		if (qss.quests.Count > 0) {
			for (int i = 0; i < qss.quests.Count; i++) {
				questsList.Add(new Quest().Load(null, qss.quests[i]));
			}
		}
	}

	public QuestSerializer Save() {
		QuestSerializer qs = new QuestSerializer();
		qs.picked = picked;
		qs.shuttlesRequired = shuttlesRequired;
		qs.crewsRequired = crewsRequired;
		return qs;
	}
	public Quest Load(Expedition e, QuestSerializer qs) {
		picked = qs.picked;
		shuttlesRequired = qs.shuttlesRequired;
		crewsRequired = qs.crewsRequired;
		expedition = e;
		return this;
	}
	#endregion
}

[System.Serializable]
public class QuestSerializer {
	public bool picked,useTimerBeforeTaking, useTimerAfterTaking;
	public float questLifeTimer,questRealizationTimer;
	public int shuttlesRequired,crewsRequired, ID;
}
[System.Serializable]
public class QuestStaticSerializer {
	public List<QuestSerializer> quests;
}

