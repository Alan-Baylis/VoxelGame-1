using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum QuestID
{
    Autogenerated,
    Progress_HousesToMax, Progress_2Docks, Progress_2Storages, Progress_Tier2, Progress_300Population, Progress_OreRefiner, Progress_HospitalCoverage,
    Progress_Tier3, Progress_4MiniReactors, Progress_100Fuel, Progress_ExpStation, Progress_Tier4, Progress_CoveredFarm, Progress_CoveredLumbermill, 
    Progress_Reactor, Progress_FirstExpedition, Progress_Tier5, Progress_FactoryComplex, Progress_SecondFloor
}
// also add new in GetQuestTexture

public class Quest  {
    public string name = string.Empty;
    public string description = string.Empty;
	public bool picked = false;
    public bool completed { get; private set; }
    public bool canBeDelayed { get; private set; }
	public float questLifeTimer {get;private set;}
	public float questRealizationTimer {get;private set;}

    public string[] steps { get; private set; }
    public string[] stepsAddInfo { get; private set; }
    public bool[] stepsFinished { get; private set; }
	public int shuttlesRequired{get;private set;}
	public int crewsRequired{get;private set;}
	public Expedition expedition{get;private set;}
    public List<Crew> crews { get; private set; }
    public QuestID ID { get; private set; }
    public byte subIndex { get; private set; }

	public static List<Quest> questsList;
    static int progressQuestMask = int.MaxValue;
    const int PROGRESS_QUEST_COUNT = 19;
    public const sbyte PROGRESS_QUESTS_INDEX = 0;

    static Quest () {
		questsList = new List<Quest>();
	}    

    public Quest()
    {
        crews = new List<Crew>();
        completed = false;
    }

    public void CheckQuestConditions()
    {
        ColonyController colony = GameMaster.colonyController;
        switch (ID)
        {
            default:
            case QuestID.Autogenerated:
                break;
            case QuestID.Progress_HousesToMax:
                {
                    float hl = colony.housingLevel;
                    byte hql = colony.hq.level;
                    stepsAddInfo[0] = string.Format("{0:0.##}", hl) + '/' + hql.ToString();
                    if (hl >= hql) MakeQuestCompleted();
                }
                break;
            case QuestID.Progress_2Docks:
                stepsAddInfo[0] = colony.docks.Count.ToString() + "/2";
                if (colony.docks.Count >= 2) MakeQuestCompleted();
                break;
            case QuestID.Progress_2Storages:
                stepsAddInfo[0] = (colony.storage.warehouses.Count - 1).ToString() + "/2";
                if (colony.storage.warehouses.Count >= 3) MakeQuestCompleted();
                break;
            case QuestID.Progress_Tier2:
                if (colony.hq.level >= 2) MakeQuestCompleted();
                break;
            case QuestID.Progress_300Population:
                stepsAddInfo[0] = colony.citizenCount .ToString() + "/300";
                if (colony.citizenCount >= 300) MakeQuestCompleted();
                break;
            case QuestID.Progress_OreRefiner:
                {
                    List<Building> powerGrid = colony.powerGrid;
                    foreach (Building b in powerGrid)
                    {
                        if (b == null) continue;
                        else
                        {
                            if (b.id == Structure.ORE_ENRICHER_2_ID)
                            {
                                MakeQuestCompleted();
                                break;
                            }
                        }
                    }
                }
                break;
            case QuestID.Progress_HospitalCoverage:
                stepsAddInfo[0] = string.Format("{0:0.###}", colony.hospitals_coefficient) + " / 1";
                if (colony.hospitals_coefficient >= 1) MakeQuestCompleted();
                break;
            case QuestID.Progress_Tier3:
                if (colony.hq.level >= 3) MakeQuestCompleted();
                break;
            case QuestID.Progress_4MiniReactors:
                {
                    List<Building> powerGrid = colony.powerGrid;
                    byte mrc = 0;
                    foreach (Building b in powerGrid)
                    {
                        if (b == null) continue;
                        else
                        {
                            if (b.id == Structure.MINI_GRPH_REACTOR_ID) mrc++;
                        }
                    }
                    stepsAddInfo[0] = mrc.ToString() + "/4";
                    if (mrc >= 4) MakeQuestCompleted();
                }
                break;
            case QuestID.Progress_100Fuel:
                {
                    int f = (int)colony.storage.standartResources[ResourceType.FUEL_ID];
                    stepsAddInfo[0] = f.ToString() + "/100";
                    if (f >= 100) MakeQuestCompleted();
                }
                break;
            case QuestID.Progress_ExpStation:
                if (XStation.current != null) MakeQuestCompleted();
                break;
            case QuestID.Progress_Tier4:
                if (colony.hq.level >= 4) MakeQuestCompleted();
                break;
            case QuestID.Progress_CoveredFarm:
                {
                    List<Building> powerGrid = colony.powerGrid;
                    foreach (Building b in powerGrid)
                    {
                        if (b == null) continue;
                        else
                        {
                            if (b.id == Structure.FARM_4_ID | b.id == Structure.FARM_5_ID)
                            {
                                MakeQuestCompleted();
                                break;
                            }
                        }
                    }
                }
                break;
            case QuestID.Progress_CoveredLumbermill:
                {
                    List<Building> powerGrid = colony.powerGrid;
                    foreach (Building b in powerGrid)
                    {
                        if (b == null) continue;
                        else
                        {
                            if (b.id == Structure.LUMBERMILL_4_ID | b.id == Structure.LUMBERMILL_5_ID)
                            {
                                MakeQuestCompleted();
                                break;
                            }
                        }
                    }
                }
                break;
            case QuestID.Progress_Reactor:
                {
                    List<Building> powerGrid = colony.powerGrid;
                    foreach (Building b in powerGrid)
                    {
                        if (b == null) continue;
                        else
                        {
                            if (b.id == Structure.GRPH_REACTOR_4_ID)
                            {
                                MakeQuestCompleted();
                                break;
                            }
                        }
                    }
                }
                break;
            case QuestID.Progress_FirstExpedition:
                {
                    byte completeness = 0;
                    if (Crew.crewsList.Count > 0)
                    {
                        completeness++;
                        stepsFinished[0] = true;
                        stepsAddInfo[0] = Crew.crewsList.Count.ToString() + "/1";
                    }
                    else
                    {
                        stepsFinished[0] = false;
                        stepsAddInfo[0] = "0/1";
                    }
                    

                    if (Shuttle.shuttlesList.Count > 0)
                    {
                        completeness++;
                        stepsFinished[1] = true;
                        stepsAddInfo[1] = Shuttle.shuttlesList.Count.ToString() + "/1";
                    }
                    else
                    {
                        stepsFinished[1] = false;
                        stepsAddInfo[1] =  "0/1";
                    }
                    if (Expedition.expeditionsList.Count > 0)
                    {
                        completeness++;
                        stepsFinished[2] = true;
                        stepsAddInfo[2] = Expedition.expeditionsList.Count.ToString() + "/1";
                    }
                    else
                    {
                        stepsFinished[2] = false;
                        stepsAddInfo[2] = "0/1";
                    }
                    if (Expedition.expeditionsSucceed >= 1)
                    {
                        completeness++;
                        stepsAddInfo[3] = Expedition.expeditionsSucceed.ToString() + "/1";
                        stepsFinished[3] = true;
                    }
                    else
                    {
                        stepsAddInfo[3] = "0/1";
                        stepsFinished[3] = false;
                    }
                    if (completeness == 4) MakeQuestCompleted();
                }
                break;
            case QuestID.Progress_Tier5:
                if (colony.hq.level >= 5) MakeQuestCompleted();
                break;
            case QuestID.Progress_FactoryComplex:
                {
                    List<Building> powerGrid = colony.powerGrid;
                    List<ChunkPos> blocksPositions = new List<ChunkPos>(), factoriesPositions = new List<ChunkPos>();
                    foreach (Building b in powerGrid)
                    {
                        if (b == null) continue;
                        else
                        {
                            if (b.id == Structure.SMELTERY_5_ID)
                            {
                                if (b.basement != null) blocksPositions.Add(b.basement.pos);
                            }
                            else
                            {
                                if (b.id == Structure.SMELTERY_3_ID | b.id == Structure.SMELTERY_2_ID | b.id == Structure.SMELTERY_1_ID)
                                {
                                    if (b.basement != null) factoriesPositions.Add(b.basement.pos);
                                }
                            }
                        }
                    }
                    if (blocksPositions.Count != 0 & factoriesPositions.Count != 0)
                    {
                        bool founded = false;
                        foreach (ChunkPos cpos in blocksPositions)
                        {                            
                            foreach (ChunkPos uppos in factoriesPositions)
                            {
                                if (uppos.x == cpos.x && uppos.y == cpos.y + 1 && uppos.z == cpos.z + 1)
                                {
                                    MakeQuestCompleted();
                                    founded = true;
                                    break;
                                }
                                if (founded) break;
                            }
                        }
                    }
                }
                break;
            case QuestID.Progress_SecondFloor:
                {
                    List<ChunkPos> checkForBuildings = new List<ChunkPos>();
                    foreach (SurfaceBlock sb in GameMaster.mainChunk.surfaceBlocks)
                    {
                        if (sb == null || sb.cellsStatus == 0) continue;
                        else
                        {
                            foreach (Structure s in sb.surfaceObjects)
                            {
                                if (!s.isBasement) continue;
                                if (s.id == Structure.COLUMN_ID)
                                {
                                    if (sb.pos.y < Chunk.CHUNK_SIZE) checkForBuildings.Add(new ChunkPos(sb.pos.x, sb.pos.y + 1, sb.pos.z));
                                }
                            }
                        }
                    }
                    if (checkForBuildings.Count > 0)
                    {
                        Chunk ch = GameMaster.mainChunk;
                        foreach (ChunkPos cpos in checkForBuildings)
                        {
                            Block b = ch.GetBlock(cpos);
                            if (b == null) continue;
                            else
                            {
                                SurfaceBlock sb = b as SurfaceBlock;
                                if (sb == null) continue;
                                else
                                {
                                    if (sb.cellsStatus != 0 & sb.artificialStructures > 0)
                                    {
                                        MakeQuestCompleted();
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
                break;
        }
    }

    public void RemoveCrew(int index)
    {
        if (crews.Count <= index) return;
        else crews.RemoveAt(index);
    }

    public void MakeQuestCompleted()
    {
        completed = true;
        UIController.current.MakeAnnouncement(Localization.AnnounceQuestCompleted(name));
        switch (ID)
        {
            case QuestID.Progress_HousesToMax:
            case QuestID.Progress_2Docks:
            case QuestID.Progress_2Storages:
            case QuestID.Progress_Tier2:
            case QuestID.Progress_300Population:
            case QuestID.Progress_OreRefiner:
            case QuestID.Progress_HospitalCoverage:
            case QuestID.Progress_Tier3:
            case QuestID.Progress_4MiniReactors:
            case QuestID.Progress_100Fuel:
            case QuestID.Progress_ExpStation:
            case QuestID.Progress_Tier4:
            case QuestID.Progress_CoveredFarm:
            case QuestID.Progress_CoveredLumbermill:
            case QuestID.Progress_Reactor:
            case QuestID.Progress_FirstExpedition:
            case QuestID.Progress_Tier5:
            case QuestID.Progress_FactoryComplex:
            case QuestID.Progress_SecondFloor:
                int x = (int)Mathf.Pow(2, subIndex);
                if ((progressQuestMask & x) == 0) progressQuestMask += x;
                break;
        }
    }

    public void Stop()
    {
        if (!picked) return;
        if (canBeDelayed)
        {
            switch (ID)
            {
                case QuestID.Progress_HousesToMax:
                case QuestID.Progress_2Docks:
                case QuestID.Progress_2Storages:
                case QuestID.Progress_Tier2:
                case QuestID.Progress_300Population:
                case QuestID.Progress_OreRefiner:
                case QuestID.Progress_HospitalCoverage:
                case QuestID.Progress_Tier3:
                case QuestID.Progress_4MiniReactors:
                case QuestID.Progress_100Fuel:
                case QuestID.Progress_ExpStation:
                case QuestID.Progress_Tier4:
                case QuestID.Progress_CoveredFarm:
                case QuestID.Progress_CoveredLumbermill:
                case QuestID.Progress_Reactor:
                case QuestID.Progress_FirstExpedition:
                case QuestID.Progress_Tier5:
                case QuestID.Progress_FactoryComplex:
                case QuestID.Progress_SecondFloor:
                    int x = (int)Mathf.Pow(2, subIndex);
                    if ((progressQuestMask & x) != 0) progressQuestMask -= x;
                    break;
            }
        }
    }

    #region allQuestList
    public Quest GetAutogeneratedQuest()
    {
        return null;
    }

    public static Quest GetProgressQuest()
    {        
        List<QuestID> complementQuests = new List<QuestID>()
        {
            QuestID.Progress_HousesToMax, QuestID.Progress_2Docks, QuestID.Progress_2Storages, QuestID.Progress_Tier2
        };
        int lvl = GameMaster.colonyController.hq.level;
        if (lvl > 1)
        {
            complementQuests.Add(QuestID.Progress_300Population);
            complementQuests.Add(QuestID.Progress_OreRefiner);
            complementQuests.Add(QuestID.Progress_HospitalCoverage);
            complementQuests.Add(QuestID.Progress_Tier3);
            if (lvl > 2)
            {
                complementQuests.Add(QuestID.Progress_4MiniReactors);
                complementQuests.Add(QuestID.Progress_100Fuel);
                complementQuests.Add(QuestID.Progress_ExpStation);
                complementQuests.Add(QuestID.Progress_Tier4);
                if (lvl > 3)
                {
                    complementQuests.Add(QuestID.Progress_CoveredFarm);
                    complementQuests.Add(QuestID.Progress_CoveredLumbermill);
                    complementQuests.Add(QuestID.Progress_Reactor);
                    complementQuests.Add(QuestID.Progress_FirstExpedition);
                    complementQuests.Add(QuestID.Progress_Tier5);
                    if (lvl > 4)
                    {
                        complementQuests.Add(QuestID.Progress_FactoryComplex);
                        complementQuests.Add(QuestID.Progress_SecondFloor);
                    }
                }
            }
        }
        int x = 1;
        for (int i = 0; i < complementQuests.Count; i++)
        {
            if ((progressQuestMask & x) == 0) complementQuests.RemoveAt(i);
            x = x << 1;
        }
        byte l = 0;
        if (complementQuests.Count > 0)
        {
            l = (byte)Mathf.Round(Random.value * complementQuests.Count);
        }
        else return null;

        Quest q = new Quest();
        bool setByDefault = true;
        q.canBeDelayed = true;
        switch (l)
        {
            case 0: q.ID = QuestID.Progress_HousesToMax;  break;
            case 1: q.ID = QuestID.Progress_2Docks;break;
            case 2: q.ID = QuestID.Progress_2Storages;break;
            case 3: q.ID = QuestID.Progress_Tier2;break;
            case 4: q.ID = QuestID.Progress_300Population;break;
            case 5: q.ID = QuestID.Progress_OreRefiner;break;
            case 6: q.ID = QuestID.Progress_HospitalCoverage;break;
            case 7: q.ID = QuestID.Progress_Tier3;break;
            case 8: q.ID = QuestID.Progress_4MiniReactors;break;
            case 9: q.ID = QuestID.Progress_100Fuel;break;
            case 10: q.ID = QuestID.Progress_ExpStation;break;
            case 11: q.ID = QuestID.Progress_Tier4;break;
            case 12: q.ID = QuestID.Progress_CoveredFarm;break;
            case 13: q.ID = QuestID.Progress_CoveredLumbermill;break;
            case 14: q.ID = QuestID.Progress_Reactor;break;
            case 15:
                q.ID = QuestID.Progress_FirstExpedition;
                setByDefault = false;
                q.steps = new string[4];
                q.stepsAddInfo = new string[4];
                q.stepsFinished = new bool[4];
                q.shuttlesRequired = 0;
                q.crewsRequired = 0;
                q.questLifeTimer = -1;
                q.questRealizationTimer = -1;
                break;
            case 16: q.ID = QuestID.Progress_Tier5;break;
            case 17:
                q.ID = QuestID.Progress_FactoryComplex;
                setByDefault = false;
                q.steps = new string[2];
                q.stepsAddInfo = new string[2];
                q.stepsFinished = new bool[2];
                q.shuttlesRequired = 0;
                q.crewsRequired = 0;
                q.questLifeTimer = -1;
                q.questRealizationTimer = -1;
                break;
            case 18:
                q.ID = QuestID.Progress_SecondFloor;
                setByDefault = false;
                q.steps = new string[2];
                q.stepsAddInfo = new string[2];
                q.stepsFinished = new bool[2];
                q.shuttlesRequired = 0;
                q.crewsRequired = 0;
                q.questLifeTimer = -1;
                q.questRealizationTimer = -1;
                break;
        }
        q.subIndex = l;
        if (setByDefault)
        {
            q.steps = new string[1];
            q.stepsAddInfo = new string[1];
            q.stepsFinished = new bool[1];
            q.shuttlesRequired = 0;
            q.crewsRequired = 0;
            q.questLifeTimer = -1;
            q.questRealizationTimer = -1;
        }
        Localization.FillProgressQuest(q);
        q.CheckQuestConditions();
        if (q.stepsAddInfo[0] == null) q.stepsAddInfo[0] = string.Empty;

        int b = (int)Mathf.Pow(2, l);
        if ((progressQuestMask & b) == 0) progressQuestMask += b;
        q.picked = true;
        return q;
    }
    #endregion

    public static void SetQuestTexture(QuestID qid, UnityEngine.UI.Image buttonImage, UnityEngine.UI.RawImage iconPlace)
    {
        // for square textures only
        Texture icon;
        Sprite overridingSprite = null;
        Rect iconRect;
        switch (qid)
        {
            default:
            case QuestID.Autogenerated: return;
            case QuestID.Progress_HousesToMax:
                overridingSprite = QuestUI.questBuildingBack_tx;
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.HOUSE_1_ID);
                break;
            case QuestID.Progress_2Docks:
                overridingSprite = QuestUI.questBuildingBack_tx;
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.DOCK_ID);
                break;
            case QuestID.Progress_2Storages:
                overridingSprite = QuestUI.questBuildingBack_tx;
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.STORAGE_0_ID);
                break;
            case QuestID.Progress_Tier2:
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.HQ_2_ID);
                break;
            case QuestID.Progress_300Population:
                icon = UIController.current.iconsTexture;
                iconRect = UIController.GetTextureUV(Icons.Citizen);
                break;
            case QuestID.Progress_OreRefiner:
                overridingSprite = QuestUI.questBuildingBack_tx;
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.ORE_ENRICHER_2_ID);
                break;
            case QuestID.Progress_HospitalCoverage:
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.HOSPITAL_2_ID);
                break;
            case QuestID.Progress_Tier3:
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.HQ_2_ID);
                break;
            case QuestID.Progress_4MiniReactors:
                overridingSprite = QuestUI.questBuildingBack_tx;
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.MINI_GRPH_REACTOR_ID);
                break;
            case QuestID.Progress_100Fuel:
                overridingSprite = QuestUI.questResourceBack_tx;
                iconRect = new Rect(0, 0, 1,1);
                icon = UIController.current.resourcesTexture;
                iconRect = ResourceType.GetTextureRect(ResourceType.FUEL_ID);
                break;
            case QuestID.Progress_ExpStation:
                overridingSprite = QuestUI.questBuildingBack_tx;
                iconRect = new Rect(0, 0, 1, 1);
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.XSTATION_ID);
                break;
            case QuestID.Progress_Tier4:
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.HQ_3_ID);
                break;
            case QuestID.Progress_CoveredFarm:
                overridingSprite = QuestUI.questBuildingBack_tx;
                iconRect = new Rect(0, 0, 1,1);
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.FARM_4_ID);
                break;
            case QuestID.Progress_CoveredLumbermill:
                overridingSprite= QuestUI.questBuildingBack_tx;
                iconRect = new Rect(0, 0, 1, 1);
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.LUMBERMILL_4_ID);
                break;
            case QuestID.Progress_Reactor:
                overridingSprite = QuestUI.questBuildingBack_tx;
                iconRect = new Rect(0, 0, 1,1);
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.GRPH_REACTOR_4_ID);
                break;
            case QuestID.Progress_FirstExpedition:
                overridingSprite = QuestUI.questBlocked_tx;
                iconRect = new Rect(0, 0, 1, 1);
                icon = UIController.current.iconsTexture;
                iconRect = UIController.GetTextureUV(Icons.GuidingStar);
                break;
            case QuestID.Progress_Tier5:
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.HQ_4_ID);
                break;
            case QuestID.Progress_FactoryComplex:
                overridingSprite = QuestUI.questBuildingBack_tx;
                iconRect = new Rect(0, 0, 1, 1);
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.SMELTERY_5_ID);
                break;
            case QuestID.Progress_SecondFloor:
                overridingSprite = QuestUI.questBuildingBack_tx;
                iconRect = new Rect(0, 0, 1, 1);
                icon = UIController.current.buildingsTexture;
                iconRect = Structure.GetTextureRect(Structure.COLUMN_ID);
                break;
        }
        if (icon != null)
        {
            iconPlace.texture = icon;
            iconPlace.uvRect = iconRect;
            iconPlace.enabled = true;
        }
        else
        {
            iconPlace.texture = null;
            iconPlace.enabled = false;
        }
        buttonImage.overrideSprite = overridingSprite;
    }

    #region save-load system
    public static QuestStaticSerializer SaveStaticData() {
		QuestStaticSerializer qss = new QuestStaticSerializer();
		qss.quests = new List<QuestSerializer>();
		if (questsList != null) {
		int i =0;
		while (i < questsList.Count) {
			if (questsList[i] == null) {
				questsList.RemoveAt(i);
				continue;
			}
			else {
				qss.quests.Add(questsList[i].Save());
				i++;
			}
		}
		}
		return qss;
	}
	public static void LoadStaticData(QuestStaticSerializer qss) {
		questsList = new List<Quest>();
		if (qss.quests.Count > 0) {
			for (int i = 0; i < qss.quests.Count; i++) {
				questsList.Add(new Quest().Load(null, qss.quests[i]));
			}
		}
	}

	public QuestSerializer Save() {
		QuestSerializer qs = new QuestSerializer();
		qs.picked = picked;
		qs.shuttlesRequired = shuttlesRequired;
		qs.crewsRequired = crewsRequired;
		return qs;
	}
	public Quest Load(Expedition e, QuestSerializer qs) {
		picked = qs.picked;
		shuttlesRequired = qs.shuttlesRequired;
		crewsRequired = qs.crewsRequired;
		expedition = e;
		return this;
	}
	#endregion
}

[System.Serializable]
public class QuestSerializer {
	public bool picked,useTimerBeforeTaking, useTimerAfterTaking;
	public float questLifeTimer,questRealizationTimer;
	public int shuttlesRequired,crewsRequired, ID;
}
[System.Serializable]
public class QuestStaticSerializer {
	public List<QuestSerializer> quests;
}

