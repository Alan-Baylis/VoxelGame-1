using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public enum QuestID
{
    Autogenerated,
    Progress_HousesToMax, Progress_2Docks, Progress_2Storages, Progress_Tier2, Progress_300Population, Progress_OreRefiner, Progress_HospitalCoverage,
    Progress_Tier3, Progress_4MiniReactors, Progress_100Fuel, Progress_ExpStation, Progress_Tier4, Progress_CoveredFarm, Progress_CoveredLumbermill, 
    Progress_Reactor, Progress_FirstExpedition, Progress_Tier5, Progress_FactoryComplex, Progress_SecondFloor
}

public class Quest  {
    public string name = string.Empty;
    public string description = string.Empty;
	public bool picked = false;
	public float questLifeTimer {get;private set;}
	public float questRealizationTimer {get;private set;}

    public string[] steps { get; private set; }
	public int shuttlesRequired{get;private set;}
	public int crewsRequired{get;private set;}
	public Expedition expedition{get;private set;}
    public QuestID ID { get; private set; }


	public static List<Quest> questsList;
    static int progressQuestMask = int.MaxValue;
    const int PROGRESS_QUEST_COUNT = 19;

	static Quest () {
		questsList = new List<Quest>();
	}       

    public void Stop()
    {
        if (!picked) return;
    }

    #region allQuestList
    public Quest GetAutogeneratedQuest()
    {
        return null;
    }

    public Quest GetProgressQuest()
    {
        int lvl = GameMaster.colonyController.hq.level;
        List<QuestID> complementQuests = new List<QuestID>()
        {
            QuestID.Progress_HousesToMax, QuestID.Progress_2Docks, QuestID.Progress_2Storages, QuestID.Progress_Tier2, QuestID.Progress_300Population, QuestID.Progress_OreRefiner, QuestID.Progress_HospitalCoverage,
            QuestID.Progress_Tier3, QuestID.Progress_4MiniReactors, QuestID.Progress_100Fuel, QuestID.Progress_ExpStation, QuestID.Progress_Tier4, QuestID.Progress_CoveredFarm, QuestID.Progress_CoveredLumbermill,
            QuestID.Progress_Reactor, QuestID.Progress_FirstExpedition, QuestID.Progress_Tier5, QuestID.Progress_FactoryComplex, QuestID.Progress_SecondFloor
        };
        int x = 1;
        for (int i = 0; i < complementQuests.Count; i++)
        {
            if ((progressQuestMask & x) == 0) complementQuests.RemoveAt(i);
            x = x << 1;
        }
        int l = 0;
        if (complementQuests.Count > 0)
        {
            l = Mathf.RoundToInt(Random.value * complementQuests.Count);
        }
        else return null;

        Quest q = new Quest();
        bool setByDefault = true;        
        switch (l)
        {
            case 0: ID = QuestID.Progress_HousesToMax;  break;
            case 1: ID = QuestID.Progress_2Docks;break;
            case 2: ID = QuestID.Progress_2Storages;break;
            case 3: ID = QuestID.Progress_Tier2;break;
            case 4: ID = QuestID.Progress_300Population;break;
            case 5: ID = QuestID.Progress_OreRefiner;break;
            case 6: ID = QuestID.Progress_HospitalCoverage;break;
            case 7: ID = QuestID.Progress_Tier3;break;
            case 8: ID = QuestID.Progress_4MiniReactors;break;
            case 9: ID = QuestID.Progress_100Fuel;break;
            case 10: ID = QuestID.Progress_ExpStation;break;
            case 11:ID = QuestID.Progress_Tier4;break;
            case 12: ID = QuestID.Progress_CoveredFarm;break;
            case 13: ID = QuestID.Progress_CoveredLumbermill;break;
            case 14: ID = QuestID.Progress_Reactor;break;
            case 15: ID = QuestID.Progress_FirstExpedition;break;
            case 16: ID = QuestID.Progress_Tier5;break;
            case 17: ID = QuestID.Progress_FactoryComplex;break;
            case 18: ID = QuestID.Progress_SecondFloor;break;
        }
        if (setByDefault)
        {
            steps = new string[1];
            shuttlesRequired = 0;
            crewsRequired = 0;
            questLifeTimer = -1;
            questRealizationTimer = -1;
        }
        Localization.FillProgressQuest(q);


        int b = (int)Mathf.Pow(2, l);
        if ((progressQuestMask & b) == 0) progressQuestMask += b;
        return q;
    }
    #endregion

    #region save-load system
    public static QuestStaticSerializer SaveStaticData() {
		QuestStaticSerializer qss = new QuestStaticSerializer();
		qss.quests = new List<QuestSerializer>();
		if (questsList != null) {
		int i =0;
		while (i < questsList.Count) {
			if (questsList[i] == null) {
				questsList.RemoveAt(i);
				continue;
			}
			else {
				qss.quests.Add(questsList[i].Save());
				i++;
			}
		}
		}
		return qss;
	}
	public static void LoadStaticData(QuestStaticSerializer qss) {
		questsList = new List<Quest>();
		if (qss.quests.Count > 0) {
			for (int i = 0; i < qss.quests.Count; i++) {
				questsList.Add(new Quest().Load(null, qss.quests[i]));
			}
		}
	}

	public QuestSerializer Save() {
		QuestSerializer qs = new QuestSerializer();
		qs.picked = picked;
		qs.shuttlesRequired = shuttlesRequired;
		qs.crewsRequired = crewsRequired;
		return qs;
	}
	public Quest Load(Expedition e, QuestSerializer qs) {
		picked = qs.picked;
		shuttlesRequired = qs.shuttlesRequired;
		crewsRequired = qs.crewsRequired;
		expedition = e;
		return this;
	}
	#endregion
}

[System.Serializable]
public class QuestSerializer {
	public bool picked,useTimerBeforeTaking, useTimerAfterTaking;
	public float questLifeTimer,questRealizationTimer;
	public int shuttlesRequired,crewsRequired, ID;
}
[System.Serializable]
public class QuestStaticSerializer {
	public List<QuestSerializer> quests;
}

